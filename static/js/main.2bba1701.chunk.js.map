{"version":3,"sources":["components/TextField/TextField.tsx","components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["URLs","MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","errorMessage","ImgUrl","ImdbUrl","test","trim","htmlFor","type","classNames","event","target","onBlur","NewMovie","onAdd","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isDisabled","count","setCount","handleSubmit","preventDefault","prevCount","onSubmit","newTitle","newDescr","newImgUrl","newImdbUrl","newImdbId","disabled","App","moviesFromServer","setMovies","newMovie","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2bba1701.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nenum URLs {\n  ImgUrl = 'imgUrl',\n  ImdbUrl = 'imdbUrl',\n}\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n\n  let hasError = false;\n  let errorMessage = '';\n\n  // eslint-disable-next-line max-len\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  if (name === URLs.ImgUrl || name === URLs.ImdbUrl) {\n    hasError = touched && required && !pattern.test(value);\n    errorMessage = `Please enter valid URL for ${label}`;\n  }\n\n  if (!value.trim()) {\n    hasError = touched && required && !value.trim();\n    errorMessage = `${label} is required`;\n  }\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{errorMessage}</p>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const isDisabled = !(title)\n    && !(imdbUrl)\n    && !(imdbUrl)\n    && !(imdbId);\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n\n  // #region handlers\n  const handleTitleChange = (newTitle: string) => {\n    setTitle(newTitle);\n  };\n\n  const handleDescriptionChange = (newDescr: string) => {\n    setDescription(newDescr);\n  };\n\n  const handleImgUrlChange = (newImgUrl: string) => {\n    setImgUrl(newImgUrl);\n  };\n\n  const handleImdbUrlChange = (newImdbUrl: string) => {\n    setImdbUrl(newImdbUrl);\n  };\n\n  const handleImdbIdChange = (newImdbId: string) => {\n    setImdbId(newImdbId);\n  };\n\n  const reset = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n    setCount(prevCount => prevCount + 1);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!title || !imgUrl || !imdbUrl || !imdbId) {\n      return;\n    }\n\n    onAdd({\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    });\n\n    reset();\n  };\n\n  // #endregion\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={event => handleSubmit(event)}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={handleTitleChange}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={handleImgUrlChange}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={handleImdbUrlChange}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={handleImdbIdChange}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (newMovie: Movie) => {\n    setMovies(currentMovies => [...currentMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}